@page "/Discover"
@using DeclarativePM.UI.Data
@implements IDisposable
@inject StateContainer StateContainer
@inject IMatDialogService MatDialogService

<h3>Discover</h3>

@if (selectLog)
{
    <MatAccordion>
        @foreach (var log in StateContainer.EventLogs)
        {
            <MatExpansionPanel ExpandedChanged="_ => Selection(log)" Style="@GetExpansionBackground(log)">
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader>
                        @log.Name
                    </MatExpansionPanelHeader>
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    <ul>
                        @foreach (var head in log.Headers)
                        {
                            <li>@head</li>
                        }
                    </ul>
                </MatExpansionPanelDetails>
            </MatExpansionPanel>
        }
    </MatAccordion>
    
    <MatButton OnClick="ContinueSelection" Disabled="@(SelectedLog is null)">Continue</MatButton>
}
else if (selectParameters)
{
    <MatChipSet Filter="true" @bind-SelectedChips="@selectedTemplates">
        @foreach (var tit in value2Items)
        {
            //TODO own onCLick instead filter to keep state
            <MatChip Label="@tit.ToString()" IsCheckable="true" Value="@tit"></MatChip>
        }
    </MatChipSet>

    //TODO description of templates

    <MatButton OnClick="BackSelectionT">Back</MatButton>
    <MatButton OnClick="ContinueSelectionT">Continue</MatButton>
}
else if (configureTemplates)
{
    <MatAccordion>
        @foreach (var tit in templates)
        {
            <MatExpansionPanel>
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader>
                        @tit.Template.ToString()
                    </MatExpansionPanelHeader>
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    <MatNumericUpDownField Label="Percentage of Instances"
                                           @bind-Value=@tit.Poi
                                           DecimalPlaces=0
                                           Minimum=0 Maximum=100>
                    </MatNumericUpDownField>
                    <MatNumericUpDownField Label="Percentage of Events"
                                           @bind-Value=@tit.Poe
                                           DecimalPlaces=0
                                           Minimum=0 Maximum=100>
                    </MatNumericUpDownField>
                </MatExpansionPanelDetails>
            </MatExpansionPanel>
        }
    </MatAccordion>
    @if (wait)
    {
        <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
        //<MatButton OnClick="AbortDiscovery">Abort</MatButton>
    }
    <MatButton OnClick="BackConfigure">Back</MatButton>
    <MatButton OnClick="ContinueConfigure">Continue</MatButton>
}
else if (showDiscovered && treeTemplates is not null && _declareModel is not null)
{
    <MatTreeView TNode="TreeNodeModel"
                 RootNode="@treeTemplates"
                 GetChildNodesCallback="@((n)=>n.Nodes)">
        <NodeTemplate>
            @context.Name
        </NodeTemplate>
    </MatTreeView>
    <MatTextField @bind-Value="@_declareModel.Name" Label="Model name" ></MatTextField><br/>
    <MatButton OnClick="SaveModel">Save</MatButton>
    <MatButton OnClick="BackDiscover">Back</MatButton>
}